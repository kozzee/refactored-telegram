import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InputMediaPhoto, InputMediaVideo
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.filters import CommandStart
from aiogram.enums import ContentType
import threading
from gigachat import GigaChat
from dotenv import load_dotenv
from server import run as run_flask
import os

load_dotenv()

# –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv("CHANEL_ID")   
API_TOKEN = os.getenv('API_TOKEN')                     

PROMPT = '''–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –∏ –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ª—É—á—à–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏, –¥–µ–ª–∞—è –∏—Ö —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –Ω–æ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ (–Ω–∏–∫–∞–∫–∏—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫, –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –∏ —Ç.–¥.).

–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
–ö–æ—Ä—Ä–µ–∫—Ç—É—Ä–∞:
‚Äî –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É.
‚Äî –£–¥–∞–ª–∏ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—É—Ç—å.

–°—Ç–∏–ª—å:
‚Äî –î–æ–±–∞–≤—å –∏–≥—Ä–æ–≤–æ–π —Å–ª–µ–Ω–≥ –∏ –æ—Ç—Å—ã–ª–∫–∏ –∫ –∏–≥—Ä–∞–º/–∫–∏–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∞—á–∏–≤–∫–∞", "—Ä–µ—Å–ø–∞–≤–Ω"), –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∞.
‚Äî –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –¥–∏–Ω–∞–º–∏—á–Ω—ã–º: –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, —Å–ø–∏—Å–∫–∏, —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
‚Äî –°–æ—Ö—Ä–∞–Ω–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω —Å —é–º–æ—Ä–æ–º, –∫–∞–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –¥—Ä—É–≥–æ–º.

SEO –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ:
‚Äî –í–∫–ª—é—á–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≥–∞–π–¥ –ø–æ Starfield", "—Ç—Ä–µ–π–ª–µ—Ä Marvel") –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
‚Äî –î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é: "–ö–∞–∫–æ–π –∫–ª–∞—Å—Å –≤ Diablo IV —Ç–µ–±–µ –∑–∞—à–µ–ª? –ñ–¥–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö!"

–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:
‚Äî –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–∫—Ç—ã (–¥–∞—Ç—ã, –Ω–∞–∑–≤–∞–Ω–∏—è, –∏–º–µ–Ω–∞). –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –æ—Å—Ç–∞–≤—å –ø–æ–º–µ—Ç–∫—É.
‚Äî –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ "–ù–æ–≤–æ—Å—Ç–∏ –∏–≥—Ä—ã" ‚Üí "–ó–∞—á–µ–º –≤—Å–µ —Å—Ç—Ä–∏–º—è—Ç —ç—Ç–æ—Ç –±–µ–∑—É–º–Ω—ã–π –±–æ—Å—Å—Ñ–∞–π—Ç?").

–ü—Ä–∏–º–µ—Ä (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!):
–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
"–í –∏–≥—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∂–∏–º –≤—ã–∂–∏–≤–∞–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –≤—Ä–∞–≥–∞–º–∏."

–†–µ–¥–∞–∫—Ü–∏—è:
"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–∞—Ç–∏–ª–∏ –∞–ø–¥–µ–π—Ç –ø–æ—á–∏—â–µ —Ü–∏—Ç–∞–¥–µ–ª–∏ –≤ Half-Life: —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∂–∏–º–µ –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤–∞—Å –∂–¥—É—Ç –ø–æ–ª—á–∏—â–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤. –°–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω—ã?"

–ß—Ç–æ –≤–∞–∂–Ω–æ:
‚Äî –ù–∏–∫–∞–∫–∏—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫, –∫–∞–≤—ã—á–µ–∫ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
‚Äî –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ —Å–∫—É—á–Ω—ã–π ‚Äî –¥–æ–±–∞–≤—å –¥—Ä–∞–π–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≥–æ–ª—ã –∏ —ç–º–æ—Ü–∏–∏ ("–≤–∑–æ—Ä–≤–∞—Ç—å –º–µ—Ç—É", "—ç–ø–∏—á–Ω—ã–π —Å—é–∂–µ—Ç"), –Ω–æ –Ω–µ –∏—Å–∫–∞–∂–∞–π —Ñ–∞–∫—Ç—ã.
‚Äî –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —è—Ä–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è –≤ —Å—Ç–∏–ª–µ ‚Äî —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º, –Ω–æ –∂–∏–≤—ã–º.'''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# class IsForwarded(Filter):
#     """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
#     async def __call__(self, message: Message) -> bool:
#         return message.forward_from is not None

# def remove_patterns(text, patterns):
#     for pattern in patterns:
#         text = re.sub(pattern, '', text)
#     return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async def rephrase_text(text):
    with GigaChat(credentials=API_TOKEN, verify_ssl_certs=False) as giga:
        response = giga.chat(f'{PROMPT} –í–æ—Ç —Ç–µ–∫—Å—Ç -[{text}]')
    answer_text = response.choices[0].message.content
    #answer_text = remove_patterns(remove_text, personal.patterns)
    return answer_text


@dp.message(CommandStart())
async def Star_Doing(message: types.Message):
    #buttons = [types.KeyboardButton(text="–†–µ—Ä–∞–π—Ç"), types.KeyboardButton(text="QR-code")]
    #keyboard_start = types.ReplyKeyboardMarkup(keyboard_start=buttons)
    #await message.answer(f'–î–æ—Ä–æ—É, {message.from_user.first_name}. –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å?', reply_markup=keyboard_start)
    await message.answer(f'–î—Ä–∞—Ç—É—Ç–∏, {message.from_user.first_name}. –≠—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏–≤—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å –°–±–µ—Ä–±–∞–Ω–∫–∞ GigaChat')

@dp.message(F.content_type == ContentType.TEXT, ~F.media_group_id)
async def text_handler(message: types.Message):
    if message.media_group_id or message.caption:
        return
    
    edited_text = f"üìù {message.text.upper()} [–û–ë–†–ê–ë–û–¢–ê–ù–û]"
    await message.answer(edited_text)

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message(F.content_type == ContentType.PHOTO, ~F.media_group_id)
async def photo_handler(message: types.Message):
    edited_text = await rephrase_text(message.caption)
    await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=edited_text)

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
@dp.message(F.content_type == ContentType.VIDEO, ~F.media_group_id)
async def video_handler(message: types.Message):
    edited_text = await rephrase_text(message.caption)
    # await message.answer_video(
    #     video=message.video.file_id, 
    #     caption=edited_text
    # )
    await bot.send_video(CHANNEL_ID, message.video.file_id, caption=edited_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# @dp.message()
# async def handle_forwarded_message(message: types.Message):
    
#     try:
#         source_info = ""
        
#         # if message.forward_from_chat:
#         #     if message.forward_from_chat.username:
#         #         source_info = f"–ò—Å—Ç–æ—á–Ω–∏–∫: –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª @{message.forward_from_chat.username}"
#         #     elif message.forward_from_chat.title:
#         #         source_info = f"–ò—Å—Ç–æ—á–Ω–∏–∫: –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª {message.forward_from_chat.title}"
        
#         if message.media_group_id is not None:
#             # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø—É –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≥—Ä—É–ø–ø—ã
#             media_group = await bot.get_media_group(
#                 chat_id=message.chat.id,
#                 message_ids=[message.message_id]
#             )

#             media_files = []
#             caption = ""

#             for msg in media_group:
#                 file = await msg.photo[-1].get_file()
#                 media_files.append(InputMediaPhoto(file.file_id, caption=caption))
#                 caption = await rephrase_text(msg.caption or "") + "\n\n" + source_info

#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞–Ω–∞–ª
#             await bot.send_media_group(CHANNEL_ID, media_files)
#         else:
#             photo = message.photo[-1] if message.photo else None
#             video = message.video if message.video else None
#             document = message.document if message.document else None

#             if photo:
#                 # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
#                 file_id = photo.file_id
                
#                 # –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
#                 caption = await rephrase_text(message.caption) + "\n\n" + source_info
#                 await bot.send_photo(CHANNEL_ID, photo=file_id, caption=caption)
#             elif video:
#                 # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
#                 file_id = video.file_id

#                 # –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª
#                 caption = await rephrase_text(video.caption) if video.caption else "" + "\n\n" + source_info
#                 await bot.send_video(CHANNEL_ID, video=file_id, caption=caption)
#             else:
#                 text = await rephrase_text(message.text) + "\n\n" + source_info
#                 await bot.send_message(CHANNEL_ID, text)
#     except Exception as e:
#         await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")





if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(dp.start_polling(bot))
    except (KeyboardInterrupt, SystemExit):
        print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')